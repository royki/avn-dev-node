name: Build and deploy

on:
  push:
    branches: [dev]
    paths-ignore:
      - 'devops/**'

jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
  configure:
    runs-on: ubuntu-latest
    needs: [cancel-previous]
    outputs:
      ENVIRONMENT: ${{ steps.configure.outputs.ENVIRONMENT }}
      IMAGE_TAG: ${{ steps.configure.outputs.IMAGE_TAG }}
      PRERELEASE: ${{ steps.configure.outputs.PRERELEASE }}
      TAG_DRY_RUN: ${{ steps.configure.outputs.TAG_DRY_RUN }}
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - id: configure
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=$(uuidgen)" >> $GITHUB_OUTPUT
            echo "PRERELEASE=true" >> $GITHUB_OUTPUT
            echo "TAG_DRY_RUN=true" >> $GITHUB_OUTPUT
          else
            echo "Branch ${{ github.ref }} is not configured for deployment"
            exit 1
          fi
  tag-release:
    name: Push tag and create release
    runs-on: ubuntu-latest
    needs: [configure]
    outputs:
      tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: release
          pre_release_branches: dev    # these branches will produce pre-release tag (eg. v0.1.2-beta.0)
          append_to_pre_release_tag: beta
          custom_release_rules: major:major:Major Changes,minor:minor:Minor Changes,chore:patch:Chores
          dry_run: ${{  needs.configure.outputs.TAG_DRY_RUN  }}   # pushes to develop won't trigger tagging

      - name: Create a GitHub release
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/release'
        uses: ncipollo/release-action@v1.12.0
        with:
          prerelease: ${{  needs.configure.outputs.PRERELEASE  }}   # master branch will create a pre-release
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  cargo-build:
    runs-on: ubuntu-latest
    needs: [cancel-previous, configure]
    environment:
        name: ${{ needs.configure.outputs.ENVIRONMENT }}
    timeout-minutes: 150
    steps:
      - name: Remove unnecessary files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          docker rmi $(docker images -aq) || true

      - name: Check out
        uses: actions/checkout@v3

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2023-05-25
          components: rustfmt, clippy
          target: wasm32-unknown-unknown
          override: true
          default: true

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --locked --release

      - name: Save the buid
        uses: actions/upload-artifact@master
        with:
          name: avn-dev-node
          path: target/release/avn-dev-node

  image-build:
    runs-on: ubuntu-latest
    needs: [cancel-previous, configure, cargo-build]
    environment:
        name: ${{ needs.configure.outputs.ENVIRONMENT }}
    steps:
      - uses: actions/checkout@v2

      - name: Get build artifact
        uses: actions/download-artifact@v2
        with:
         name: avn-dev-node
         path: target/release/avn-dev-node

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & push docker images
        env:
          BUILD_ID: ${{ needs.configure.outputs.IMAGE_TAG }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build and Push ewx-avn-node
          docker build -t $ECR_REGISTRY/ewx-avn-node:$BUILD_ID .
          docker push $ECR_REGISTRY/ewx-avn-node:$BUILD_ID

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

